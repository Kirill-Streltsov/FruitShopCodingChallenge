openapi: 3.0.3
info:
  title: Fruit Shop API
  description: |
    ![Logo](https://www.predic8.de/logo6.png)

    Showcases REST API design and serves as a public API for
    educational usage. Feel free to use this API even by using the POST, PUT and DELETE methods. You
    cannot do any harm, the API will be reset automatically.
  contact:
    name: Predic8
    url: https://www.predic8.de
    email: info@predic8.de
  version: 2.0.0
servers:
  - url: https://api.predic8.de/shop/v2
tags:
  - name: Products
paths:
  /products:
    get:
      tags:
        - Products
      summary: Get all products
      description: Get a list of all the products available over the Fruitshop API.
      operationId: getProducts
      parameters:
        - $ref: "#/components/parameters/Start"
        - $ref: "#/components/parameters/Limit"
      responses:
        '200':
          $ref: "#/components/responses/Products"
  /products/{id}:
    parameters:
      - $ref: "#/components/parameters/Id"
    get:
      tags:
        - Products
      summary: Get product by id
      description: Get detailed information about the product.
      operationId: getProduct
      responses:
        '200':
          $ref: "#/components/responses/Product"
        '4XX':
          $ref: "#/components/responses/NotFound"
        '5XX':
          $ref: "#/components/responses/ServerError"
  /products/{id}/image:
    parameters:
      - $ref: "#/components/parameters/Id"
    get:
      tags:
        - Products
      summary: Get image
      description: Get image of the product
      operationId: getProductImage
      responses:
        '200':
          $ref: "#/components/responses/Image"
        '4XX':
          $ref: "#/components/responses/NotFound"
        '5XX':
          $ref: "#/components/responses/ServerError"

components:
  parameters:
    Id:
      name: id
      in: path
      description: Id of the object
      required: true
      schema:
        $ref: "#/components/schemas/Id"
    Start:
      name: start
      in: query
      description: Starting entry of the result list
      schema:
        type: number
        minimum: 1
        default: 1
        example: 7
    Limit:
      name: limit
      in: query
      description: Limits the number of result entries
      schema:
        minimum: 1
        type: number
        default: 10
        example: 100
  requestBodies:
    Product:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
          example:
            name: Mangos,
            price: 2.79

  responses:
    ServerError:
      description: Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          example:
            type: "https://api.predic8.de/shop/v2/validation"
            title: "Server Error"
            status: 500
            detail: Internal Server Error

    NotFound:
      description: Client Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          example:
            type: "https://api.predic8.de/shop/v2/validation"
            title: "Not Found"
            status: 404
            detail: An entry with this id does not exist
    Product:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Product"
          example:
            id: 8
            name: Mangos,
            price: 2.79
    ProductCreated:
      description: Created
      headers:
        location:
          schema:
            type: string
            format: uri
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Product"
          example:
            id: 8
            name: Mangos,
            price: 2.79
            self_link: /shop/v2/products/8
    Products:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              meta:
                $ref: "#/components/schemas/Meta"
              products:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      $ref: "#/components/schemas/Id"
                    name:
                      type: string
                      description: Name of the product
                      example: Cherries
                    self_link:
                      $ref: "#/components/schemas/SelfLink"
                  example:
                    id: 1
                    name: Banana
                    self_link: /shop/v2/products/1
    Image:
      description: OK
      content:
        image/jpeg:
          schema:
            $ref: "#/components/schemas/Image"
    Success:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: string
                example: added
  schemas:
    Id:
      type: integer
      description: Id of an object
      example: 8
      minimum: 1
      readOnly: true
    SelfLink:
      type: string
      format: url
      readOnly: true
      example: /shop/v2/...
      description: Link to the resource itself
    Meta:
      required:
        - count
      type: object
      properties:
        count:
          type: integer
          description: Number of resources
          example: 22
        start:
          type: integer
          description: Starting entry of the result list
          example: 11
        limit:
          type: integer
          description: How many entries are delivered in one response
          example: 10
        previous_link:
          type: string
          description: URL to the previous page of results
          example: /shop/v2/products/?start=1&limit=10
        next_link:
          type: string
          description: URL to the next page of results
          example: /shop/v2/products/?start=21&limit=10
      description: Metadata about a collection of resources.
    Product:
      type: object
      description: Description of a product
      required:
        - name
        - price
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
          description: Name of a product
          example: Berries
          maxLength: 30
        price:
          type: number
          description: Price of a good
          example: 4.5
          minimum: 0
          maximum: 1000
        image_link:
          type: string
          readOnly: true
        self_link:
          $ref: "#/components/schemas/SelfLink"
      example:
        name: Wildberries
        price: 4.99
    Image:
      type: string
      format: binary
      description: Image as binary
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          format: url
        title:
          type: string
        status:
          type: integer
          minimum: 200
        detail:
          type: string
          maxLength: 500
